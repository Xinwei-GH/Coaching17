name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Triggers deployment on push to main branch

permissions:
  contents: read

jobs:
  deploy:
    name: Build, Push & Deploy to ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      TASK_DEF: ${{ vars.TASK_DEF }}
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
      ECS_TASK_EXECUTION_ROLE: ${{ vars.ECS_TASK_EXECUTION_ROLE }}

    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6

    - name: Initialize Terraform
      run: terraform init

    # Ensure ECR Repository Exists Before Running Terraform
    - name: Check and Create ECR Repository if Missing
      run: |
        if ! aws ecr describe-repositories --repository-names ${{ vars.ECR_REPOSITORY }} > /dev/null 2>&1; then
          echo "ECR Repository does not exist. Creating it now..."
          aws ecr create-repository --repository-name ${{ vars.ECR_REPOSITORY }}
        else
          echo "ECR Repository already exists."
        fi

    # Import ECS Service if it already exists to avoid duplicate creation
    - name: Import ECS Service if Exists
      run: |
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} | grep -q "serviceName"; then
          echo "ECS Service already exists. Importing into Terraform state..."
          terraform import aws_ecs_service.xinwei-service ${{ env.ECS_CLUSTER }}/${{ env.ECS_SERVICE }}
        else
          echo "ECS Service does not exist. Terraform will create it."
        fi

    # Import IAM Role if Not Exists
    - name: Import IAM Role if Not Exists
      run: |
        IAM_ROLE_NAME=${{ vars.ECS_TASK_EXECUTION_ROLE }}
        IAM_ROLE_ARN=$(aws iam get-role --role-name "$IAM_ROLE_NAME" --query "Role.Arn" --output text || echo "")

        if [ -z "$IAM_ROLE_ARN" ]; then
          echo "IAM Role not found in AWS. Skipping import."
        else
          if ! terraform state list | grep -q "aws_iam_role.ecs_task_execution_role"; then
            echo "IAM Role found in AWS. Importing..."
            terraform import aws_iam_role.ecs_task_execution_role "$IAM_ROLE_ARN"
          fi
        fi

    - name: Plan Terraform Changes
      run: terraform plan -out=tfplan

    - name: Apply Terraform Changes
      run: terraform apply -auto-approve tfplan

    # Capture Terraform Outputs
    - name: Capture Terraform Outputs
      run: |
        echo "SUBNET_1=$(terraform output -json subnet_1 | jq -r .)" >> $GITHUB_ENV
        echo "SUBNET_2=$(terraform output -json subnet_2 | jq -r .)" >> $GITHUB_ENV
        echo "SECURITY_GROUP=$(terraform output -json security_group | jq -r .)" >> $GITHUB_ENV
        echo "TASK_DEF=$(terraform output -json ecs_task_definition | jq -r .)" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Register New ECS Task Definition
      id: task-def
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_DEF }} --query taskDefinition > task-definition.json

        aws ecs register-task-definition --cli-input-json file://task-definition.json \
          --container-definitions '[{"name":"${{ env.CONTAINER_NAME }}","image":"${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"}]'

    - name: Deploy Updated Task Definition to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.TASK_DEF }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
